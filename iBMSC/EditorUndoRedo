using System;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;

namespace iBMSC
{

    public partial class MainWindow : Form
    {
        private void PerformCommand(iBMSC.UndoRedo.LinkedURCmd sCmd)
        {
            for (int xI2 = 1, loopTo = Information.UBound(this.Notes); xI2 <= loopTo; xI2++)
                this.Notes[xI2].Selected = false;
            this.LBeat.SelectedIndices.Clear();

            while (sCmd is not null)
            {
                byte xType = sCmd.ofType();

                switch (xType)
                {
                    case iBMSC.UndoRedo.opAddNote:
                        {
                            iBMSC.UndoRedo.AddNote xCmd = (iBMSC.UndoRedo.AddNote)sCmd;

                            Array.Resize(ref this.Notes, Information.UBound(this.Notes) + 1 + 1);
                            this.Notes[Information.UBound(this.Notes)] = xCmd.note;

                            if (this.TBWavIncrease.Checked)
                            {
                                this.IncreaseCurrentWav();
                            }

                            break;
                        }
                    case iBMSC.UndoRedo.opRemoveNote:
                        {
                            iBMSC.UndoRedo.RemoveNote xCmd = (iBMSC.UndoRedo.RemoveNote)sCmd;
                            int xI2 = this.FindNoteIndex(xCmd.note);

                            if (xI2 < this.Notes.Length)
                            {
                                for (int xI3 = xI2 + 1, loopTo1 = Information.UBound(this.Notes); xI3 <= loopTo1; xI3++)
                                    this.Notes[xI3 - 1] = this.Notes[xI3];
                                Array.Resize(ref this.Notes, Information.UBound(this.Notes));
                            }

                            if (this.TBWavIncrease.Checked)
                            {
                                this.DecreaseCurrentWav();
                            }

                            break;
                        }

                    case iBMSC.UndoRedo.opChangeNote:
                        {
                            iBMSC.UndoRedo.ChangeNote xCmd = (iBMSC.UndoRedo.ChangeNote)sCmd;
                            int xI2 = this.FindNoteIndex(xCmd.note);

                            if (xI2 < this.Notes.Length)
                            {
                                this.Notes[xI2] = xCmd.note;
                            }

                            break;
                        }

                    case iBMSC.UndoRedo.opMoveNote:
                        {
                            iBMSC.UndoRedo.MoveNote xCmd = (iBMSC.UndoRedo.MoveNote)sCmd;
                            int xI2 = this.FindNoteIndex(xCmd.note);

                            if (xI2 < this.Notes.Length)
                            {
                                {
                                    ref var withBlock = ref this.Notes[xI2];
                                    withBlock.ColumnIndex = xCmd.NColumnIndex;
                                    withBlock.VPosition = xCmd.NVPosition;
                                    withBlock.Selected = xCmd.note.Selected & this.nEnabled(withBlock.ColumnIndex);
                                }
                            }

                            break;
                        }

                    case iBMSC.UndoRedo.opLongNoteModify:
                        {
                            iBMSC.UndoRedo.LongNoteModify xCmd = (iBMSC.UndoRedo.LongNoteModify)sCmd;
                            int xI2 = this.FindNoteIndex(xCmd.note);

                            if (xI2 < this.Notes.Length)
                            {
                                {
                                    ref var withBlock1 = ref this.Notes[xI2];
                                    if (this.NTInput)
                                    {
                                        withBlock1.VPosition = xCmd.NVPosition;
                                        withBlock1.Length = xCmd.NLongNote;
                                    }
                                    else
                                    {
                                        withBlock1.LongNote = Conversions.ToBoolean(xCmd.NLongNote);
                                    }
                                    withBlock1.Selected = xCmd.note.Selected & this.nEnabled(withBlock1.ColumnIndex);
                                }
                            }

                            break;
                        }

                    case iBMSC.UndoRedo.opHiddenNoteModify:
                        {
                            iBMSC.UndoRedo.HiddenNoteModify xCmd = (iBMSC.UndoRedo.HiddenNoteModify)sCmd;
                            int xI2 = this.FindNoteIndex(xCmd.note);

                            if (xI2 < this.Notes.Length)
                            {
                                this.Notes[xI2].Hidden = xCmd.NHidden;
                                this.Notes[xI2].Selected = xCmd.note.Selected & this.nEnabled(this.Notes[xI2].ColumnIndex);
                            }

                            break;
                        }

                    case iBMSC.UndoRedo.opRelabelNote:
                        {
                            iBMSC.UndoRedo.RelabelNote xCmd = (iBMSC.UndoRedo.RelabelNote)sCmd;
                            int xI2 = this.FindNoteIndex(xCmd.note);

                            if (xI2 < this.Notes.Length)
                            {
                                this.Notes[xI2].Value = xCmd.NValue;
                                this.Notes[xI2].Selected = xCmd.note.Selected & this.nEnabled(this.Notes[xI2].ColumnIndex);
                            }

                            break;
                        }

                    case iBMSC.UndoRedo.opRemoveAllNotes:
                        {
                            Array.Resize(ref this.Notes, 1);
                            break;
                        }

                    case iBMSC.UndoRedo.opChangeMeasureLength:
                        {
                            iBMSC.UndoRedo.ChangeMeasureLength xCmd = (iBMSC.UndoRedo.ChangeMeasureLength)sCmd;
                            long xxD = iBMSC.Editor.Functions.GetDenominator(xCmd.Value / 192d);
                            // Dim xDenom As Integer = 192 / GCD(xCmd.Value, 192.0R)
                            // If xDenom < 4 Then xDenom = 4
                            foreach (int xM in xCmd.Indices)
                            {
                                this.MeasureLength[xM] = xCmd.Value;
                                this.LBeat.Items[xM] = Operators.ConcatenateObject(iBMSC.Editor.Functions.Add3Zeros(xM) + ": " + xCmd.Value / 192d, Interaction.IIf(xxD > 10000L, "", " ( " + (long)Math.Round(xCmd.Value / 192d * (double)xxD) + " / " + xxD + " ) "));
                                this.LBeat.SelectedIndices.Add(xM);
                            }
                            this.UpdateMeasureBottom();
                            break;
                        }

                    case iBMSC.UndoRedo.opChangeTimeSelection:
                        {
                            iBMSC.UndoRedo.ChangeTimeSelection xCmd = (iBMSC.UndoRedo.ChangeTimeSelection)sCmd;
                            this.vSelStart = xCmd.SelStart;
                            this.vSelLength = xCmd.SelLength;
                            this.vSelHalf = xCmd.SelHalf;
                            if (xCmd.Selected)
                            {
                                double xSelLo = Conversions.ToDouble(Operators.AddObject(this.vSelStart, Interaction.IIf(this.vSelLength < 0d, (object)this.vSelLength, 0)));
                                double xSelHi = Conversions.ToDouble(Operators.AddObject(this.vSelStart, Interaction.IIf(this.vSelLength > 0d, (object)this.vSelLength, 0)));
                                for (int xI2 = 1, loopTo2 = Information.UBound(this.Notes); xI2 <= loopTo2; xI2++)
                                    this.Notes[xI2].Selected = this.Notes[xI2].VPosition >= xSelLo && this.Notes[xI2].VPosition < xSelHi && this.nEnabled(this.Notes[xI2].ColumnIndex);
                            }

                            break;
                        }

                    case iBMSC.UndoRedo.opNT:
                        {
                            iBMSC.UndoRedo.NT xCmd = (iBMSC.UndoRedo.NT)sCmd;
                            this.NTInput = xCmd.BecomeNT;
                            this.TBNTInput.Checked = this.NTInput;
                            this.mnNTInput.Checked = this.NTInput;

                            this.POBLong.Enabled = !this.NTInput;
                            this.POBLongShort.Enabled = !this.NTInput;
                            this.bAdjustLength = false;
                            this.bAdjustUpper = false;

                            if (xCmd.AutoConvert)
                            {
                                if (this.NTInput)
                                    this.ConvertBMSE2NT();
                                else
                                    this.ConvertNT2BMSE();
                            }

                            break;
                        }
                    case iBMSC.UndoRedo.opWavAutoincFlag:
                        {
                            iBMSC.UndoRedo.WavAutoincFlag xcmd = (iBMSC.UndoRedo.WavAutoincFlag)sCmd;
                            this.TBWavIncrease.Checked = xcmd.Checked;
                            break;
                        }

                    case iBMSC.UndoRedo.opVoid:
                        {
                            break;
                        }

                    case iBMSC.UndoRedo.opNoOperation:
                        {
                            break;
                        }
                        // Exit Do

                }

                sCmd = sCmd.Next;
            }

            this.THBPM.Value = (decimal)((double)this.Notes[0].Value / 10000d);
            if (this.IsSaved)
                this.SetIsSaved(false);

            this.SortByVPositionInsertion();
            this.UpdatePairing();
            this.CalculateTotalPlayableNotes();
            this.CalculateGreatestVPosition();
            this.RefreshPanelAll();
            this.POStatusRefresh();
        }

        private void AddUndo(iBMSC.UndoRedo.LinkedURCmd sCUndo, iBMSC.UndoRedo.LinkedURCmd sCRedo, bool OverWrite = false)
        {
            if (sCUndo is null & sCRedo is null)
                return;
            if (this.IsSaved)
                this.SetIsSaved(false);
            if (!OverWrite)
                this.sI = this.sIA();

            // ClearURReference(sUndo(sI))
            // ClearURReference(sRedo(sI))
            // ClearURReference(sUndo(sIA))
            // ClearURReference(sRedo(sIA))
            this.sUndo[this.sI] = sCUndo;
            this.sRedo[this.sI] = sCRedo;
            this.sUndo[this.sIA()] = new iBMSC.UndoRedo.NoOperation();
            this.sRedo[this.sIA()] = new iBMSC.UndoRedo.NoOperation();
            this.TBUndo.Enabled = true;
            this.TBRedo.Enabled = false;
            this.mnUndo.Enabled = true;
            this.mnRedo.Enabled = false;
        }

        private void ClearUndo()
        {
            // For xI1 As Integer = 0 To 99
            // ClearURReference(sUndo(xI1))
            // ClearURReference(sRedo(xI1))
            // Next

            this.sUndo = new iBMSC.UndoRedo.LinkedURCmd[100];
            this.sRedo = new iBMSC.UndoRedo.LinkedURCmd[100];
            this.sUndo[0] = new iBMSC.UndoRedo.NoOperation();
            this.sUndo[1] = new iBMSC.UndoRedo.NoOperation();
            this.sRedo[0] = new iBMSC.UndoRedo.NoOperation();
            this.sRedo[1] = new iBMSC.UndoRedo.NoOperation();
            this.sI = 0;
            this.TBUndo.Enabled = false;
            this.TBRedo.Enabled = false;
            this.mnUndo.Enabled = false;
            this.mnRedo.Enabled = false;
        }

        private void RedoAddNote(iBMSC.Editor.Note note, ref iBMSC.UndoRedo.LinkedURCmd BaseUndo, ref iBMSC.UndoRedo.LinkedURCmd BaseRedo, bool autoinc = false)
        {
            var xUndo = new iBMSC.UndoRedo.RemoveNote(note);
            var xRedo = new iBMSC.UndoRedo.AddNote(note);
            xUndo.Next = BaseUndo;
            BaseUndo = xUndo;
            if (BaseRedo is not null)
                BaseRedo.Next = xRedo;
            BaseRedo = xRedo;
        }

        private void RedoAddNote(int[] xIndices, bool xSel, ref iBMSC.UndoRedo.LinkedURCmd BaseUndo, ref iBMSC.UndoRedo.LinkedURCmd BaseRedo)
        {
            for (int xI1 = 0, loopTo = Information.UBound(xIndices); xI1 <= loopTo; xI1++)
            {
                var xUndo = new iBMSC.UndoRedo.RemoveNote(this.Notes[xI1]);
                var xRedo = new iBMSC.UndoRedo.AddNote(this.Notes[xI1]);
                xUndo.Next = BaseUndo;
                BaseUndo = xUndo;
                if (BaseRedo is not null)
                    BaseRedo.Next = xRedo;
                BaseRedo = xRedo;
            }
        }

        private void RedoAddNoteSelected(bool xSel, ref iBMSC.UndoRedo.LinkedURCmd BaseUndo, ref iBMSC.UndoRedo.LinkedURCmd BaseRedo)
        {
            for (int xI1 = 1, loopTo = Information.UBound(this.Notes); xI1 <= loopTo; xI1++)
            {
                if (!this.Notes[xI1].Selected)
                    continue;

                var xUndo = new iBMSC.UndoRedo.RemoveNote(this.Notes[xI1]);
                var xRedo = new iBMSC.UndoRedo.AddNote(this.Notes[xI1]);
                xUndo.Next = BaseUndo;
                BaseUndo = xUndo;
                if (BaseRedo is not null)
                    BaseRedo.Next = xRedo;
                BaseRedo = xRedo;

            }
        }

        private void RedoAddNoteAll(bool xSel, ref iBMSC.UndoRedo.LinkedURCmd BaseUndo, ref iBMSC.UndoRedo.LinkedURCmd BaseRedo)
        {
            for (int xI1 = 1, loopTo = Information.UBound(this.Notes); xI1 <= loopTo; xI1++)
            {

                var xRedo = new iBMSC.UndoRedo.AddNote(this.Notes[xI1]);
                if (BaseRedo is not null)
                    BaseRedo.Next = xRedo;
                BaseRedo = xRedo;

            }
            var xUndo = new iBMSC.UndoRedo.RemoveAllNotes();
            xUndo.Next = BaseUndo;
            BaseUndo = xUndo;
        }


        private void RedoRemoveNote(iBMSC.Editor.Note xN, ref iBMSC.UndoRedo.LinkedURCmd BaseUndo, ref iBMSC.UndoRedo.LinkedURCmd BaseRedo)
        {
            var xUndo = new iBMSC.UndoRedo.AddNote(xN);
            var xRedo = new iBMSC.UndoRedo.RemoveNote(xN);
            xUndo.Next = BaseUndo;
            BaseUndo = xUndo;
            if (BaseRedo is not null)
                BaseRedo.Next = xRedo;
            BaseRedo = xRedo;
        }

        private void RedoRemoveNote(int[] xIndices, ref iBMSC.UndoRedo.LinkedURCmd BaseUndo, ref iBMSC.UndoRedo.LinkedURCmd BaseRedo)
        {
            for (int xI1 = 0, loopTo = Information.UBound(xIndices); xI1 <= loopTo; xI1++)
            {
                var xUndo = new iBMSC.UndoRedo.AddNote(this.Notes[xIndices[xI1]]);
                var xRedo = new iBMSC.UndoRedo.RemoveNote(this.Notes[xIndices[xI1]]);
                xUndo.Next = BaseUndo;
                BaseUndo = xUndo;
                if (BaseRedo is not null)
                    BaseRedo.Next = xRedo;
                BaseRedo = xRedo;
            }
        }

        private void RedoRemoveNoteSelected(bool xSel, ref iBMSC.UndoRedo.LinkedURCmd BaseUndo, ref iBMSC.UndoRedo.LinkedURCmd BaseRedo)
        {
            for (int xI1 = 1, loopTo = Information.UBound(this.Notes); xI1 <= loopTo; xI1++)
            {
                if (!this.Notes[xI1].Selected)
                    continue;
                var xUndo = new iBMSC.UndoRedo.AddNote(this.Notes[xI1]);
                var xRedo = new iBMSC.UndoRedo.RemoveNote(this.Notes[xI1]);
                xUndo.Next = BaseUndo;
                BaseUndo = xUndo;
                if (BaseRedo is not null)
                    BaseRedo.Next = xRedo;
                BaseRedo = xRedo;
            }
        }

        private void RedoRemoveNoteAll(bool xSel, ref iBMSC.UndoRedo.LinkedURCmd BaseUndo, ref iBMSC.UndoRedo.LinkedURCmd BaseRedo)
        {
            for (int xI1 = 1, loopTo = Information.UBound(this.Notes); xI1 <= loopTo; xI1++)
            {
                {
                    ref var withBlock = ref this.Notes[xI1];
                    var xUndo = new iBMSC.UndoRedo.AddNote(this.Notes[xI1]);
                    xUndo.Next = BaseUndo;
                    BaseUndo = xUndo;
                }
            }
            var xRedo = new iBMSC.UndoRedo.RemoveAllNotes();
            if (BaseRedo is not null)
                BaseRedo.Next = xRedo;
            BaseRedo = xRedo;
        }

        private void RedoChangeNote(iBMSC.Editor.Note note1, iBMSC.Editor.Note note2, ref iBMSC.UndoRedo.LinkedURCmd BaseUndo, ref iBMSC.UndoRedo.LinkedURCmd BaseRedo)
        {
            var xUndo = new iBMSC.UndoRedo.ChangeNote(note2, note1);
            var xRedo = new iBMSC.UndoRedo.ChangeNote(note1, note2);
            xUndo.Next = BaseUndo;
            BaseUndo = xUndo;
            if (BaseRedo is not null)
                BaseRedo.Next = xRedo;
            BaseRedo = xRedo;
        }


        private void RedoMoveNote(iBMSC.Editor.Note note, int nCol, double nVPos, ref iBMSC.UndoRedo.LinkedURCmd BaseUndo, ref iBMSC.UndoRedo.LinkedURCmd BaseRedo)
        {
            var noteAfterModification = note;
            noteAfterModification.ColumnIndex = nCol;
            noteAfterModification.VPosition = nVPos;
            var xUndo = new iBMSC.UndoRedo.MoveNote(noteAfterModification, note.ColumnIndex, note.VPosition);
            var xRedo = new iBMSC.UndoRedo.MoveNote(note, nCol, nVPos);
            xUndo.Next = BaseUndo;
            BaseUndo = xUndo;
            if (BaseRedo is not null)
                BaseRedo.Next = xRedo;
            BaseRedo = xRedo;
        }


        private void RedoLongNoteModify(iBMSC.Editor.Note note, double nVPos, double nLong, ref iBMSC.UndoRedo.LinkedURCmd BaseUndo, ref iBMSC.UndoRedo.LinkedURCmd BaseRedo)
        {
            var n = note;
            n.VPosition = nVPos;
            n.Length = nLong;

            var xUndo = new iBMSC.UndoRedo.LongNoteModify(n, note.VPosition, note.Length);
            var xRedo = new iBMSC.UndoRedo.LongNoteModify(note, nVPos, n.Length);
            xUndo.Next = BaseUndo;
            BaseUndo = xUndo;
            if (BaseRedo is not null)
                BaseRedo.Next = xRedo;
            BaseRedo = xRedo;
        }

        private void RedoHiddenNoteModify(iBMSC.Editor.Note xN, bool nHide, bool xSel, ref iBMSC.UndoRedo.LinkedURCmd BaseUndo, ref iBMSC.UndoRedo.LinkedURCmd BaseRedo)
        {
            var noteAfterModification = xN;
            noteAfterModification.Hidden = nHide;
            var xUndo = new iBMSC.UndoRedo.HiddenNoteModify(noteAfterModification, xN.Hidden);
            var xRedo = new iBMSC.UndoRedo.HiddenNoteModify(xN, nHide);
            xUndo.Next = BaseUndo;
            BaseUndo = xUndo;
            if (BaseRedo is not null)
                BaseRedo.Next = xRedo;
            BaseRedo = xRedo;
        }


        private void RedoRelabelNote(iBMSC.Editor.Note xN, long nVal, ref iBMSC.UndoRedo.LinkedURCmd BaseUndo, ref iBMSC.UndoRedo.LinkedURCmd BaseRedo)
        {
            var noteAfterModification = xN;
            noteAfterModification.Value = nVal;
            var xUndo = new iBMSC.UndoRedo.RelabelNote(noteAfterModification, xN.Value);
            var xRedo = new iBMSC.UndoRedo.RelabelNote(xN, nVal);
            xUndo.Next = BaseUndo;
            BaseUndo = xUndo;
            if (BaseRedo is not null)
                BaseRedo.Next = xRedo;
            BaseRedo = xRedo;
        }

        private void RedoChangeMeasureLengthSelected(double nVal, ref iBMSC.UndoRedo.LinkedURCmd BaseUndo, ref iBMSC.UndoRedo.LinkedURCmd BaseRedo)
        {
            var xIndices = new int[this.LBeat.SelectedIndices.Count];
            this.LBeat.SelectedIndices.CopyTo(xIndices, 0);
            if (xIndices.Length == 0)
                return;

            var xmLen = new double[0];
            var xUndo = new iBMSC.UndoRedo.ChangeMeasureLength[0];
            foreach (int xI1 in xIndices)
            {
                int xI = Array.IndexOf(xmLen, this.MeasureLength[xI1]);
                if (xI == -1)
                {
                    Array.Resize(ref xmLen, Information.UBound(xmLen) + 1 + 1);
                    Array.Resize(ref xUndo, Information.UBound(xUndo) + 1 + 1);
                    xmLen[Information.UBound(xmLen)] = this.MeasureLength[xI1];
                    xUndo[Information.UBound(xUndo)] = new iBMSC.UndoRedo.ChangeMeasureLength(this.MeasureLength[xI1], new int[] { xI1 });
                }
                else
                {
                    {
                        ref var withBlock = ref xUndo[xI];
                        Array.Resize(ref withBlock.Indices, Information.UBound(withBlock.Indices) + 1 + 1);
                        withBlock.Indices[Information.UBound(withBlock.Indices)] = xI1;
                    }
                }
            }
            for (int xI1 = 0, loopTo = Information.UBound(xUndo) - 1; xI1 <= loopTo; xI1++)
                xUndo[xI1].Next = xUndo[xI1 + 1];
            xUndo[Information.UBound(xUndo)].Next = BaseUndo;
            BaseUndo = xUndo[0];

            var xRedo = new iBMSC.UndoRedo.ChangeMeasureLength(nVal, (int[])xIndices.Clone());
            if (BaseRedo is not null)
                BaseRedo.Next = xRedo;
            BaseRedo = xRedo;
        }

        private void RedoChangeTimeSelection(double pStart, double pLen, double pHalf, double nStart, double nLen, double nHalf, bool xSel, ref iBMSC.UndoRedo.LinkedURCmd BaseUndo, ref iBMSC.UndoRedo.LinkedURCmd BaseRedo)
        {
            var xUndo = new iBMSC.UndoRedo.ChangeTimeSelection(pStart, pLen, pHalf, xSel);
            var xRedo = new iBMSC.UndoRedo.ChangeTimeSelection(nStart, nLen, nHalf, xSel);
            xUndo.Next = BaseUndo;
            BaseUndo = xUndo;
            if (BaseRedo is not null)
                BaseRedo.Next = xRedo;
            BaseRedo = xRedo;
        }

        // Private Sub RedoChangeVisibleColumns(ByVal pBLP As Boolean, ByVal pSTOP As Boolean, ByVal pPlayer As Integer, _
        // ByVal nBLP As Boolean, ByVal nSTOP As Boolean, ByVal nPlayer As Integer, _
        // ByRef BaseUndo As UndoRedo.LinkedURCmd, ByRef BaseRedo As UndoRedo.LinkedURCmd)
        // Dim xUndo As New UndoRedo.ChangeVisibleColumns(pBLP, pSTOP, pPlayer)
        // Dim xRedo As New UndoRedo.ChangeVisibleColumns(nBLP, nSTOP, nPlayer)
        // xUndo.Next = BaseUndo
        // BaseUndo = xUndo
        // If BaseRedo IsNot Nothing Then BaseRedo.Next = xRedo
        // BaseRedo = xRedo
        // End Sub

        private void RedoNT(bool becomeNT, bool autoConvert, ref iBMSC.UndoRedo.LinkedURCmd BaseUndo, ref iBMSC.UndoRedo.LinkedURCmd BaseRedo)
        {
            var xUndo = new iBMSC.UndoRedo.NT(!becomeNT, autoConvert);
            var xRedo = new iBMSC.UndoRedo.NT(becomeNT, autoConvert);
            xUndo.Next = BaseUndo;
            BaseUndo = xUndo;
            if (BaseRedo is not null)
                BaseRedo.Next = xRedo;
            BaseRedo = xRedo;
        }

        private void RedoWavIncrease(bool wavinc, ref iBMSC.UndoRedo.LinkedURCmd BaseUndo, ref iBMSC.UndoRedo.LinkedURCmd BaseRedo)
        {
            var xUndo = new iBMSC.UndoRedo.WavAutoincFlag(!wavinc);
            var xRedo = new iBMSC.UndoRedo.WavAutoincFlag(wavinc);
            xUndo.Next = BaseUndo;
            BaseUndo = xUndo;
            if (BaseUndo is not null)
                BaseRedo.Next = xRedo;
            BaseRedo = xRedo;
        }
    }
}